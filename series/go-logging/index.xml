<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go-logging on Hi Folks</title><link>https://huanggze.top/series/go-logging/</link><description>Recent content in go-logging on Hi Folks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© huanggze 2021</copyright><lastBuildDate>Thu, 07 Apr 2022 16:19:16 +0800</lastBuildDate><atom:link href="https://huanggze.top/series/go-logging/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 日志：zap</title><link>https://huanggze.top/posts/go-logging-part2/</link><pubDate>Thu, 07 Apr 2022 16:19:16 +0800</pubDate><guid>https://huanggze.top/posts/go-logging-part2/</guid><description>zap 是 Uber 开源的 logging 库。
Zap Logger Zap 提供两种日志记录器（logger）：Sugared Logger 和 Logger。前者者支持结构化日志以及 Printf 风格日志，后者只支持结构化日志，但后者性能更好。
1 2 3 4 5 6 // {&amp;#34;level&amp;#34;:&amp;#34;info&amp;#34;,&amp;#34;ts&amp;#34;:1649341600.931539,&amp;#34;caller&amp;#34;:&amp;#34;awesomeProject/main.go:10&amp;#34;,&amp;#34;msg&amp;#34;:&amp;#34;hello&amp;#34;,&amp;#34;val1&amp;#34;:1,&amp;#34;val2&amp;#34;:&amp;#34;two&amp;#34;} logger, _ := zap.NewProduction() logger.Info(&amp;#34;hello&amp;#34;, zap.Int(&amp;#34;val1&amp;#34;, 1), zap.String(&amp;#34;val2&amp;#34;, &amp;#34;two&amp;#34;), ) 1 2 3 4 5 6 logger, _ := zap.NewProduction() sugar := logger.Sugar() // {&amp;#34;level&amp;#34;:&amp;#34;info&amp;#34;,&amp;#34;ts&amp;#34;:1649341600.931539,&amp;#34;caller&amp;#34;:&amp;#34;awesomeProject/main.go:10&amp;#34;,&amp;#34;msg&amp;#34;:&amp;#34;hello&amp;#34;,&amp;#34;val1&amp;#34;:1,&amp;#34;val2&amp;#34;:&amp;#34;two&amp;#34;} sugar.Infow(&amp;#34;hello&amp;#34;, zap.Int(&amp;#34;val1&amp;#34;, 1), zap.String(&amp;#34;val2&amp;#34;, &amp;#34;two&amp;#34;)) // {&amp;#34;level&amp;#34;:&amp;#34;info&amp;#34;,&amp;#34;ts&amp;#34;:1649342764.54033,&amp;#34;caller&amp;#34;:&amp;#34;awesomeProject/main.go:12&amp;#34;,&amp;#34;msg&amp;#34;:&amp;#34;val1=1, val2=two&amp;#34;} sugar.Infof(&amp;#34;val1=%d, val2=%s&amp;#34;, 1, &amp;#34;two&amp;#34;) Zap 支持三种方式创建预置 logger：NewExample()、NewProduction()、NewDevelopment()。它们的区别是日志信息内容。
定制 Logger 你也可以定制 logger（custom logger）来实现额外功能，比如输出日志到文件1。此时，需要使用 New() 方法，而不是前面的 NewXXX()。New() 方法的函数签名如下。它需要接收一个 zapcore 参数。</description></item><item><title>Go 日志：klog</title><link>https://huanggze.top/posts/go-logging-part1/</link><pubDate>Wed, 06 Apr 2022 21:23:09 +0800</pubDate><guid>https://huanggze.top/posts/go-logging-part1/</guid><description>klog 是 K8s 社区维护的 logging 库，支持在程序命令行注册以下 flag1：
log_file：输出到日志文件； log_file_max_size：日志文件最大大小（单位：mb），如果超过最大值则会擦除日志文件全部内容，并从头开始写日志。未设置最大值时，无限制； logtostderr：是否输出到标准错误输出，如果想输出到文件，改值应设为 false； skip_log_headers：忽略记录日志元信息； v：日志等级 示例 1：手动/自动输出日志到文件 1 2 3 4 5 6 7 8 9 10 11 12 13 14 func main() { fs := flag.NewFlagSet(&amp;#34;klog&amp;#34;, flag.ExitOnError) // 注册 flag klog.InitFlags(fs) fs.Set(&amp;#34;skip_log_headers&amp;#34;, &amp;#34;true&amp;#34;) // 解析 flag fs.Parse(os.Args[1:]) klog.Info(&amp;#34;nice to meet you&amp;#34;) klog.ErrorS(errors.New(&amp;#34;oops&amp;#34;), &amp;#34;noooo&amp;#34;) // 手动刷新日志记录到文件 klog.Flush() // 或者每 5s 自动 flush // time.Sleep(6 * time.</description></item></channel></rss>