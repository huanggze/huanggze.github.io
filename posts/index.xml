<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Hi Folks</title><link>https://huanggze.github.io/posts/</link><description>Recent content in Posts on Hi Folks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© huanggze 2021</copyright><lastBuildDate>Sat, 15 Jan 2022 21:20:28 +0800</lastBuildDate><atom:link href="https://huanggze.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>K8s Operator 开发（一）：概述</title><link>https://huanggze.github.io/posts/k8s-operator-dev-part1/</link><pubDate>Sat, 15 Jan 2022 21:20:28 +0800</pubDate><guid>https://huanggze.github.io/posts/k8s-operator-dev-part1/</guid><description>Operator 控制器 K8s 定义了很多抽象内部资源来描述不同工作负载类型，比如 Deployment 用于无状态应用1部署、StatefulSet 用于有状态应用、CronJob 适用于运行定时任务。
Deployment 和 StatefulSet 的区别2：
Deployment 创建的 Pod 之间没有顺序，服务通过 Service 的 Service IP 暴露。Deployment 也可以使用持久化存储卷实现有状态应用部署，但有使用限制。Deployment 只支持通过 .spec.template.spec.volumes.persistentVolumeClaim 引用一个 PVC（提前创建）。如果该 PVC 访问模式支持且设置为 RWO，Deployment 副本数量必须为 1（单 Pod）；否则，使用 RWX 模式，多个 Pod 共享存储。 StatefulSet：每个 Pod 有自己的存储，通过 .spec.volumeClaimTemplates 为每个 Pod 创建一个独立的 PV 保存其数据和状态。即使删除 StatefulSet 或 Pod 宕机，创建的 PVC 仍保留其数据并可以在 Pod 恢复后重新恢复绑定。StatefulSet 和无头服务配合使用（.spec.clusterIP=None），无头服务不做负载均衡，返回所有关联 Pod 的 IP 地址列表。 这些 K8s 内部资源的状态由对应资源的控制器来维护，比如 Deployment 对应 Deployment Controller。K8s 控制组件 kube-controller-manager 包含了所有内部资源控制器。控制器本质上是一个控制回路（control loop）无限循环进程，Watch 资源状态，并做出相应调整，调协当前状态（status）至期望状态（spec），如：滚动更新，恢复宕机的 Pod。对于运行在 Pod 中的程序，如下图3中的 DB 和 Web 程序，他们本身并无感知自身运行在 K8s 环境中。应用运维由 K8s 控制器来完成。</description></item><item><title>About</title><link>https://huanggze.github.io/posts/about/</link><pubDate>Fri, 16 Jul 2021 11:24:06 +0800</pubDate><guid>https://huanggze.github.io/posts/about/</guid><description/></item></channel></rss>