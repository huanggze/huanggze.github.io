<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>配置 on Hi Folks</title><link>https://huanggze.github.io/categories/%E9%85%8D%E7%BD%AE/</link><description>Recent content in 配置 on Hi Folks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© huanggze 2021</copyright><lastBuildDate>Mon, 28 Feb 2022 09:42:28 +0800</lastBuildDate><atom:link href="https://huanggze.github.io/categories/%E9%85%8D%E7%BD%AE/index.xml" rel="self" type="application/rss+xml"/><item><title>开源数据约束语言 CUE</title><link>https://huanggze.github.io/posts/intro-cue/</link><pubDate>Mon, 28 Feb 2022 09:42:28 +0800</pubDate><guid>https://huanggze.github.io/posts/intro-cue/</guid><description>CUE（Configure Unify Execute）是一种数据验证语言，有自己的推理引擎，可作为配置语言使用。CUE 语言的特点是把数据类型（type）和值（value）看作同一概念：Types are Values。如下图展示了 CUE 的核心思想，左边是数据，中间是类型，右边（.cue）是数据与类型的混合，约束了任何 largeCapital 数据必须包含字符串类型的 name 字段，大于 5M 的 pop 字段以及值为 true 的 capital 字段。
CUE 的主要功能包含：
数据验证：客户侧数据校验 代码导入/导出：支持从 Go 代码、Protobuf、YAML、JSON 等源文件转换成 CUE 文件 配置管理：是 JSON 的超集，支持类型检查 辅助工具：cue trim 自动修剪冗余 CUE 示例 下面 cue 文件定义了三个字段，a 是 int 类型，值为 1；b 是对象类型；c 是 string 类型，未赋具体指。
1 2 3 4 5 6 7 // demo.cue a: int a: 1 b: { c: &amp;#34;abc&amp;#34; } d: string 执行验证命令 cue eval demo.</description></item></channel></rss>