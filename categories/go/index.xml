<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on Hi Folks</title><link>https://huanggze.github.io/categories/go/</link><description>Recent content in go on Hi Folks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© huanggze 2021</copyright><lastBuildDate>Thu, 24 Feb 2022 19:21:30 +0800</lastBuildDate><atom:link href="https://huanggze.github.io/categories/go/index.xml" rel="self" type="application/rss+xml"/><item><title>管理 Go 命令行工具</title><link>https://huanggze.github.io/posts/manage-go-tools/</link><pubDate>Thu, 24 Feb 2022 19:21:30 +0800</pubDate><guid>https://huanggze.github.io/posts/manage-go-tools/</guid><description>有时候，在我们的项目中需要使用一些 Go 命令行工具，比如 ginkgo 测试工具、CI 工具、代码自动生成工具 client-gen 等。因此，需要确保 Go 命令行工具在 CI 服务器上等不同环境版本一致。
解决办法是把依赖的工具加到 go module 中。创建 tools.go，在文件中引用依赖工具包：
1 2 3 4 5 6 7 // +build tools package main import ( _ &amp;#34;github.com/onsi/ginkgo/v2/ginkgo&amp;#34; ) 编译标签：
注意 tools.go 中我们使用了编译标签（build tag）1// +build tools，作用是 go build 时会过滤掉带有标签的 go 文件，除非使用 go build -tags 指定标签编译。因为 tools.go 带有标签，不会被编译，仅用于指定 go 二进制安装版本。
这样我们就可以使用 go install github.com/onsi/ginkgo/v2/ginkgo 安装到指定版本的 ginkgo 工具。go install 会把安装到目录下。
go install 使用：</description></item></channel></rss>