<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on Hi Folks</title><link>https://huanggze.github.io/categories/go/</link><description>Recent content in go on Hi Folks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© huanggze 2021</copyright><lastBuildDate>Mon, 28 Feb 2022 09:42:28 +0800</lastBuildDate><atom:link href="https://huanggze.github.io/categories/go/index.xml" rel="self" type="application/rss+xml"/><item><title>开源数据约束语言 CUE</title><link>https://huanggze.github.io/posts/intro-cue/</link><pubDate>Mon, 28 Feb 2022 09:42:28 +0800</pubDate><guid>https://huanggze.github.io/posts/intro-cue/</guid><description>CUE（Configure Unify Execute）是一种数据验证语言，有自己的推理引擎，可作为配置语言使用。CUE 语言的特点是把数据类型（type）和值（value）看作同一概念：Types are Values。如下图展示了 CUE 的核心思想，左边是数据，中间是类型，右边（.cue）是数据与类型的混合，约束了任何 largeCapital 数据必须包含字符串类型的 name 字段，大于 5M 的 pop 字段以及值为 true 的 capital 字段。
CUE 的主要功能包含：
数据验证：客户侧数据校验 代码导入/导出：支持从 Go 代码、Protobuf、YAML、JSON 等源文件转换成 CUE 文件 配置管理：是 JSON 的超集，支持类型检查 辅助工具：cue trim 自动修剪冗余 CUE 示例 下面 cue 文件定义了三个字段，a 是 int 类型，值为 1；b 是对象类型；c 是 string 类型，未赋具体指。
1 2 3 4 5 6 7 // demo.cue a: int a: 1 b: { c: &amp;#34;abc&amp;#34; } d: string 执行验证命令 cue eval demo.</description></item><item><title>Ginkgo 测试框架介绍</title><link>https://huanggze.github.io/posts/intro-ginkgo/</link><pubDate>Fri, 25 Feb 2022 21:32:07 +0800</pubDate><guid>https://huanggze.github.io/posts/intro-ginkgo/</guid><description>除了 Go testing 包提供的测试框架，还可以使用 Ginkgo 测试框架。Ginkgo 是一个行为驱动开发（Behavior Driven Development，BDD）测试框架。BDD 是一种敏捷开发技术，建立在测试驱动开发（Test Driven Development，TDD）基础之上，强调使用 DSL（Domain Specific Language，领域特定语言）描述用户行为、定义业务需求，是需求分析人员、开发人员与测试人员进行沟通的有效方法1。行为驱动开发的核心在于&amp;quot;行为&amp;quot;。当业务需求被划分为不同的业务场景，并以 &amp;ldquo;Given-When-Then&amp;rdquo; 的形式描述出来时，就形成了一种范式化的领域建模规约。
如下是使用 Ginkgo 测试框架搭建的测试用例，描述的业务场景是根据书本页数（Book.Pages）对书进行分类，小于 300 页应为短篇，大于 300 页应为小说：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 var _ = Describe(&amp;#34;Books&amp;#34;, func() { var foxInSocks, lesMis *books.Book BeforeEach(func() { lesMis = &amp;amp;books.</description></item><item><title>管理 Go 命令行工具</title><link>https://huanggze.github.io/posts/manage-go-tools/</link><pubDate>Thu, 24 Feb 2022 19:21:30 +0800</pubDate><guid>https://huanggze.github.io/posts/manage-go-tools/</guid><description>有时候，在我们的项目中需要使用一些 Go 命令行工具，比如 ginkgo 测试工具、CI 工具、代码自动生成工具 client-gen 等。因此，需要确保 Go 命令行工具在 CI 服务器上等不同环境版本一致。
解决办法是把依赖的工具加到 go module 中。创建 tools.go，在文件中引用依赖工具包：
1 2 3 4 5 6 7 // +build tools package main import ( _ &amp;#34;github.com/onsi/ginkgo/v2/ginkgo&amp;#34; ) 编译标签：
注意 tools.go 中我们使用了编译标签（build tag）1// +build tools，作用是 go build 时会过滤掉带有标签的 go 文件，除非使用 go build -tags 指定标签编译。因为 tools.go 带有标签，不会被编译，仅用于指定 go 二进制安装版本。
这样我们就可以使用 go install github.com/onsi/ginkgo/v2/ginkgo 安装到指定版本的 ginkgo 工具。go install 会把安装到目录下。
go install 使用：</description></item></channel></rss>