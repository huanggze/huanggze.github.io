<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Istio on Hi Folks</title><link>https://huanggze.top/categories/istio/</link><description>Recent content in Istio on Hi Folks</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>© huanggze 2021</copyright><lastBuildDate>Fri, 18 Feb 2022 21:34:49 +0800</lastBuildDate><atom:link href="https://huanggze.top/categories/istio/index.xml" rel="self" type="application/rss+xml"/><item><title>Istio Egress 网关实践</title><link>https://huanggze.top/posts/istio-egress/</link><pubDate>Fri, 18 Feb 2022 21:34:49 +0800</pubDate><guid>https://huanggze.top/posts/istio-egress/</guid><description>本文介绍如何配置 Istio 使服务网格内的服务通过 Egress 网关访问外部服务。实验架构图如下，服务网格运行在 K8s 集群上，外部服务单独部署在集群外的一台虚拟机上。
环境准备 使用阿里云部署一个托管单节点 K8s 集群，再在同一 VPC 下创建一个 ECS 实例（假设 IP 地址为 192.168.0.78）用于部署外部服务。在 K8s 集群上安装 Istio，注意：1. 安装时同时开启 Egress Gateway；2.设置只允许访问注册进服务网格的服务；3. 开启 Envoy 访问日志（别忘了！）1：
1 2 3 4 5 istioctl install \ --set components.egressGateways[0].name=istio-egressgateway \ --set components.egressGateways[0].enabled=true \ --set meshConfig.outboundTrafficPolicy.mode=REGISTRY_ONLY \ --set meshConfig.accessLogFile=/dev/stdout 在集群外的这个虚拟机（192.168.0.78）上开启 HTTP 服务，监听端口为 1234：
1 python -m http.server 1234 在 K8s 集群上部署一个开启 istio 代理的 Pod 用于作为测试客户端来访问：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 kubectl label namespace default istio-injection=enabled kubectl apply -f - &amp;lt;&amp;lt;EOF apiVersion: apps/v1 kind: Deployment metadata: name: sleep spec: selector: matchLabels: app: sleep template: metadata: labels: app: sleep spec: containers: - name: sleep image: curlimages/curl command: [&amp;#34;/bin/sleep&amp;#34;, &amp;#34;3650d&amp;#34;] imagePullPolicy: IfNotPresent EOF 尝试从 sleep Pod 中测试访问 192.</description></item><item><title>Istio 多集群部署（四）：多网络主从架构</title><link>https://huanggze.top/posts/istio-multicluster-deployment-part4/</link><pubDate>Mon, 31 Jan 2022 11:16:04 +0800</pubDate><guid>https://huanggze.top/posts/istio-multicluster-deployment-part4/</guid><description>多网络主从架构 多网络、主从架构安装可参考官方文档 Install Primary-Remote on different networks 。主从架构中，主集群的网关不仅暴露网格内的服务，还有暴露 Istio 控制平面的作用。架构示意图如下：
环境准备 本文使用阿里云托管 K8s 服务，在两个不同 VPC 下，分别部署一个 K8s 集群（命名 cluster1 和 cluster2，本示例部署的是单 worker node 集群），模拟多网络、多主集群。注意，创建集群时，「集群配置 &amp;gt; API Server 访问」一栏中，勾选「使用 EIP 暴露 API Server」。这使的 kube-apiserver 可以公网访问，用于公网连接的 kubeconfig 在集群页「连接信息 &amp;gt; 公网访问」中拿到。
在两个集群上，下载安装 istioctl（1.12.2 版本）：
1 2 3 curl -O https://ghproxy.com/https://github.com/istio/istio/releases/download/1.12.2/istioctl-1.12.2-linux-amd64.tar.gz tar zxvf istioctl-1.12.2-linux-amd64.tar.gz mv istioctl /usr/local/bin/ 最后，为了启用 kubectl 命令，拷贝一份内网访问 kubeconfig（通过阿里云控制台，容器服务 &amp;gt; 集群列表 &amp;gt; 集群信息 &amp;gt; 连接信息，获取）到各自集群 worker node 机器上的 .kube/ 目录下，文件命名为 config。
部署 Istio 控制平面 Step 1.</description></item><item><title>Istio 支持虚拟机集成实践</title><link>https://huanggze.top/posts/istio-virtual-machines/</link><pubDate>Sat, 29 Jan 2022 14:52:28 +0800</pubDate><guid>https://huanggze.top/posts/istio-virtual-machines/</guid><description>Istio 支持 K8s 集群外的虚拟机及虚拟机运行的应用加入 Istio 服务网格。这允许老的应用以及不适合容器化部署的应用也能使用 Istio 服务网格。 在单网络下，Gateway 负责虚拟机访问允许在 K8s 上的 Istio 控制平面：
多网络下，Gateway 负责同时暴露 Istio 控制平面和服务网格内的服务：
虚拟机集成 Step 1. 环境准备 本文使用阿里云，在同一 VPC 下，部署一个 K8s 托管集群以及一个 ECS 实例，模拟单网络下集成虚拟机。在 K8s 节点机器上设置以下环境变量用于后续操作，并创建工作目录 mkdir -p &amp;quot;${WORK_DIR}&amp;quot;。
1 2 3 4 5 6 7 8 9 10 11 VM_APP=&amp;#34;demo&amp;#34; VM_NAMESPACE=&amp;#34;vm&amp;#34; WORK_DIR=&amp;#34;${HOME}/vmintegration&amp;#34; SERVICE_ACCOUNT=&amp;#34;vm&amp;#34; # 多网络下，K8s 集群和虚拟机所在网络分别命名，如： # CLUSTER_NETWORK=&amp;#34;kube-network&amp;#34; # VM_NETWORK=&amp;#34;vm-network&amp;#34; # 而 CLUSTER 值赋为 cluster1 CLUSTER_NETWORK=&amp;#34;&amp;#34; VM_NETWORK=&amp;#34;&amp;#34; CLUSTER=&amp;#34;Kubernetes&amp;#34; Step 2. 安装 Istio 控制平面 在 K8s 集群上安装 Istio（如果集群已安装则无须安装，但仍要暴露 Istio 控制平面）：</description></item><item><title>Istio 多集群部署（三）：多网络多主架构</title><link>https://huanggze.top/posts/istio-multicluster-deployment-part3/</link><pubDate>Sat, 29 Jan 2022 13:32:02 +0800</pubDate><guid>https://huanggze.top/posts/istio-multicluster-deployment-part3/</guid><description>多网络、多主架构 多网络指多集群间网络隔离，Pod 与 Pod 不互通。因此 API Server 需要暴露公网，且需要分别配置网关，使 Pod 与 Pod 通过网关通信。架构示意图如下，部署教程参考官方文档 Install Multi-Primary on different networks：
环境准备 本文使用阿里云托管 K8s 服务，在两个不同 VPC 下，分别部署一个 K8s 集群（命名 cluster1 和 cluster2，本示例部署的是单 worker node 集群），模拟多网络、多主集群。注意，创建集群时，「集群配置 &amp;gt; API Server 访问」一栏中，勾选「使用 EIP 暴露 API Server」。这使的 kube-apiserver 可以公网访问，用于公网连接的 kubeconfig 在集群页「连接信息 &amp;gt; 公网访问」中拿到。
在两个集群上，下载安装 istioctl（1.12.2 版本）：
1 2 3 curl -O https://ghproxy.com/https://github.com/istio/istio/releases/download/1.12.2/istioctl-1.12.2-linux-amd64.tar.gz tar zxvf istioctl-1.12.2-linux-amd64.tar.gz mv istioctl /usr/local/bin/ 最后，为了启用 kubectl 命令，拷贝一份内网访问 kubeconfig（通过阿里云控制台，容器服务 &amp;gt; 集群列表 &amp;gt; 集群信息 &amp;gt; 连接信息，获取）到各自集群 worker node 机器上的 .</description></item><item><title>Istio 多集群部署（二）：单一网络主从架构</title><link>https://huanggze.top/posts/istio-multicluster-deployment-part2/</link><pubDate>Fri, 28 Jan 2022 23:24:39 +0800</pubDate><guid>https://huanggze.top/posts/istio-multicluster-deployment-part2/</guid><description>主从架构 主从架构指主集群安装 Istio 控制平面，从集群（remote cluster）连接主集群 Istio 控制平面。在主从架构中，从集群需要通过专门的 gateway 访问主集群上的 Istio 控制平面。简言之，如果集群内部署有 Istio 控制平面，该集群内的工作负载实例访问集群内的控制平面（主集群模式），否则访问外部 Istio 控制平面（从集群模式）。下图展示的是单网格、单网络、主从架构部署：
部署测试 参考官方文档部署 Install Primary-Remote 即可，前期工作与上一篇类似。有两点需要注意：
1. 配置 CA 中间证书 Configure Trust 必不可少，需要正确配置。否则会出现证书问题，istio-ingressgateway 无法启动，报错如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $ kubectl get po -n istio-system NAME READY STATUS RESTARTS AGE istio-ingressgateway-b68f578f6-p8j4p 0/1 Running 0 5m58s istiod-7cd5464766-hr8t4 1/1 Running 0 6m2s $ kubectl describe po -n istio-system istio-ingressgateway-b68f578f6-p8j4p Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Scheduled 9m32s default-scheduler Successfully assigned istio-system/istio-ingressgateway-b68f578f6-p8j4p to cn-guangzhou.</description></item><item><title>Istio 多集群部署（一）：单一网络多主架构</title><link>https://huanggze.top/posts/istio-multicluster-deployment-part1/</link><pubDate>Fri, 28 Jan 2022 15:28:19 +0800</pubDate><guid>https://huanggze.top/posts/istio-multicluster-deployment-part1/</guid><description>单网格、单网络、多主架构 单网格、单网络、多主架构部署对应官方文档 Install Multi-Primary。单网格、单网络、多主架构部署指单个 Istio 服务网格（service mesh）运行在单个完全互联的网络上。网络内有多个集群，同时存在多个主集群（primary cluster）运行 Istio 控制平面。示例架构如下图：
单一网络模型，即所有工作负载实例（workload instances，指 pods）都可以直接相互访问、完全互联，而无需 Istio 网关。
注意：这里「可以直接相互访问」指的是 Pod 与 Pod 间互通（可互 ping），包括跨集群的 Pod 通信。不是指 Service 之间 Cluster IP 互相可 ping，Service 的 ClusterIP 不支持跨集群访问。ClusterIP 是虚拟 IP，没有对应实体，而跨集群 Pod IP 能互 ping 是因为路由表中存在对应网段的下一跳节点。
多主架构指多个集群下，存在多个单独部署的 Istio 控制平面。我们知道，Istio 控制平面通过向工作负载实例的 Envoy 代理下发服务端点信息实现流量管理。因此单网格下，Istio 控制平面需要拿到所有集群的服务端点信息。服务端点发现需要配置 Istio 控制平面使其能访问每个集群的 kube-apiserver1。
环境准备 本文使用阿里云托管 K8s 服务，在同一 VPC 下，部署两个集群（命名 cluster1 和 cluster2，本示例部署的是单 worker node 集群），模拟单网络、多集群。注意，在创建托管 K8s 界面里应设置 Pod CIDR 为不同网段，如 10.210.0.0/16 和 10.211.0.0/16。创建完后，检查跨集群 Pod 是否可以互相通信（互 ping Pod IP）。同一 VPC 下部署的集群 Pod 互通是因为 VPC 路由表存在对应的网段下一跳节点（通过阿里云控制台「专有网络 &amp;gt; 路由表」查看）。</description></item></channel></rss>